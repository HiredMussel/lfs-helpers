#!/bin/bash

PACKAGE_PATH=.

# Helper functions for creating and editing the package config

# Create the package - a package is a shell script containing instructions on
# how the package is to be installed with the configuration options set by 
# specific comments within the file.
create_pkg() {
    [ $# -eq 0 ] \
        && echo "All packages created successfully" \
        && return 1

    [ ! -d $PACKAGE_PATH ] \
        && echo "Please create $PACKAGE_PATH to proceed" \
        && return 2

    echo "Creating package $1 in $PACKAGE_PATH/$1"

    [ ! -d $PACKAGE_PATH/$1 ] \
        && mkdir $PACKAGE_PATH/$1

    [ -e $PACKAGE_PATH/$1/PKGBUILD ] \
        && echo "Package $1 already exists" \
        && return 3

    touch $PACKAGE_PATH/$1/PKGBUILD
    cat << EOF > $PACKAGE_PATH/$1/PKGBUILD
#!/bin/bash

# [General]
#
# [Version]
# stable_version=
# version_listing=
# version_scheme=
# latest_version=
#
# [Build]
# distfiles=
#
# [Dependencies]
# depends_on=
# depended_on_by=
# lock=

EOF
    echo "Created package $1 successfully"
}

# Retrieve a key from a package
get_pkg_data() {
    [ $# -eq 0 ] \
        && echo "No configuration option selected" \
        && return 1

    [ $# -eq 1 ] \
        && return

    [ ! -e $PACKAGE_PATH/$2/PKGBUILD ] \
        && echo "Could not find configuration for package $2" \
        && return 3

    sed -n "s@#\s*$1=\s*\(.*\)\($\)@\1@p" $PACKAGE_PATH/$2/PKGBUILD

    get_pkg_data $1 ${@:3}
}

# Change a key in a package
change_pkg_data() {
    [ $# -eq 0 ] \
        && echo "No configuration option selected" \
        && return 1

    [ $# -eq 1 ] \
        && echo "No new value for option $1 provided" \
        && return 2

    [ $# -eq 2 ] \
        && return

    [ ! -e $PACKAGE_PATH/$3/PKGBUILD ] \
        && echo "Could not find package configuration" \
        && return 3

    sed -i "s@\(#\s*$1=\).*@\1$2@" $PACKAGE_PATH/$3/PKGBUILD
}

# Add a key to a package
add_pkg_data() {
    [ $# -eq 0 ] \
        && echo "No package name provided" \
        && return 1

    [ $# -eq 1 ] \
        && echo "No configuration option selected" \
        && return 2

    [ $# -eq 2 ] \
        && return

    [ ! -e $PACKAGE_PATH/$3/PKGBUILD ] \
        && echo "Could not find package configuration" \
        && return 3

    sed -i "s@#\s*\[General\]@\0\n#\ $1=$2@" $PACKAGE_PATH/$3/PKGBUILD
}

# Set a key in a package
modify_pkg_data() {
    [ $# -eq 0 ] \
        && echo "No configuration option selected" \
        && return 1

    [ $# -eq 1 ] \
        && echo "No new value for option $1 provided" \
        && return 2

    [ $# -eq 2 ] \
        && return

    [ ! -e $PACKAGE_PATH/$3/PKGBUILD ] \
        && echo "Could not find configuration for package $3" \
        && return 3

    change_pkg_data $1 $2 $3

    [ -z $(get_pkg_data $1 $3) ] \
        && add_pkg_data $1 $2 $3
    
    modify_pkg_data $1 $2 ${@:4}
}

# Delete a key in a package
delete_pkg_data() {
    [ $# -eq 0 ] \
        && echo "No key to delete selected" \
        && return 1

    [ $# -eq 1 ] \
        && return

    sed -i "s@\(#\s*$1=\).*@\1@" $PACKAGE_PATH/$2/PKGBUILD

    delete_pkg_data $1 ${@:3}
}

# Handle the cases where we take in a configuration option
[ ! -z $(echo $1 | grep -- "\-.*[MDG].*") ] \
    && config_option=$2 \
    && set -- "-${1}" "${@:3}"

# Handle the cases where we take in a value for the configuration option
[ ! -z $(echo $1 | grep -- "\-.*[MDG].*") ] \
    && config_value=$2 \
    && set -- "-${1}" "${@:3}"

packages=$(echo ${@:2} | tr " " "\n" | sort -u | tr "\n" " ")

echo "Will attempt to affect the following packages:"
echo $packages

[ ! -z $(echo $1 | grep -- "\-C.*") ] \
    && echo "Will attempt to create packages $packages" \
    && for package in $packages
       do
            create_pkg $package
       done

[ ! -z $(echo $1 | grep -- "\-M.*") ] \
    && echo "Will attempt to set $config_option to $config_value for packages $packages" \
    && modify_pkg_data $config_option $config_value $packages

[ ! -z $(echo $1 | grep -- "\-D.*") ] \
    && echo "Will attempt to clear the value of $config_option for packages $packages" \
    && delete_pkg_data $config_option $packages

[ ! -z $(echo $1 | grep -- "\-G.*") ] \
    && echo "Will attempt to return the value of $config_option for packages $packages" \
    && get_pkg_data $config_option $packages

exit
