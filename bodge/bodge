#!/bin/sh

# Declare global program variables
BODGE_CFLAGS=
BODGE_CXXFLAGS=

BODGE_DEFAULT_PACKAGE_PATH=/home/buildbox/Development/lfs-helpers/bodge
BODGE_DEFAULT_ROOT=/home/buildbox/Development/lfs-helpers/fakeroot/

# Put the global program variables into the expected formats
[ ! -z $BODGE_PACKAGE_PATH ] \
    && BODGE_PACKAGE_PATH=$BODGE_PACKAGE_PATH \
    || BODGE_PACKAGE_PATH=$BODGE_DEFAULT_PACKAGE_PATH

[ ! -z $BODGE_ROOT ] \
    && BODGE_ROOT=$BODGE_ROOT \
    || BODGE_ROOT=$BODGE_DEFAULT_ROOT

BODGE_PACKAGE_PATH=$(echo $BODGE_PACKAGE_PATH | sed 's@/*$@@')
BODGE_ROOT=$(echo $BODGE_ROOT | sed 's@/*$@/@')

# Helper functions for creating and editing the package config

# Create the package - a package is a shell script containing instructions on
# how the package is to be installed with the configuration options set by 
# specific comments within the file.
create_pkg() {
    [ $# -eq 0 ] \
        && echo "All packages created successfully" \
        && return 1

    [ ! -d $BODGE_PACKAGE_PATH ] \
        && echo "Please create $BODGE_PACKAGE_PATH to proceed" \
        && return 2

    echo "Creating package $1 in $BODGE_PACKAGE_PATH/$1"

    [ ! -d $BODGE_PACKAGE_PATH/$1 ] \
        && mkdir $BODGE_PACKAGE_PATH/$1

    [ -e $BODGE_PACKAGE_PATH/$1/PKGBUILD ] \
        && echo "Package $1 already exists" \
        && return 3

    touch $BODGE_PACKAGE_PATH/$1/PKGBUILD
    cat << EOF > $BODGE_PACKAGE_PATH/$1/PKGBUILD
#!/bin/bash

# [General]
#
# [Version]
# stable_version=
# version_listing=
# version_scheme=
# latest_version=
# current_version=
# installed_version=
#
# [Build]
# distfiles=
#
# [Dependencies]
# depends_on=
# depended_on_by=
# lock=

EOF
    echo "Created package $1 successfully"
}

# Retrieve a key from a package
get_pkg_data() {
    [ $# -eq 0 ] \
        && echo "No configuration option selected" \
        && return 1

    [ $# -eq 1 ] \
        && return

    [ ! -e $BODGE_PACKAGE_PATH/$2/PKGBUILD ] \
        && echo "Could not find configuration for package $2" \
        && return 3

    sed -n "s@#\s*$1=\s*\(.*\)\($\)@\1@p" $BODGE_PACKAGE_PATH/$2/PKGBUILD

    get_pkg_data $1 $(echo $@ | shift 3)
}

# Change a key in a package
change_pkg_data() {
    [ $# -eq 0 ] \
        && echo "No configuration option selected" \
        && return 1

    [ $# -eq 1 ] \
        && echo "No new value for option $1 provided" \
        && return 2

    [ $# -eq 2 ] \
        && return

    [ ! -e $BODGE_PACKAGE_PATH/$3/PKGBUILD ] \
        && echo "Could not find package configuration" \
        && return 3

    sed -i "s@\(#\s*$1=\).*@\1$2@" $BODGE_PACKAGE_PATH/$3/PKGBUILD

    echo "Succesfully set $1 to $2 for package $3"
}

# Add a key to a package
add_pkg_data() {
    [ $# -eq 0 ] \
        && echo "No package name provided" \
        && return 1

    [ $# -eq 1 ] \
        && echo "No configuration option selected" \
        && return 2

    [ $# -eq 2 ] \
        && return

    [ ! -e $BODGE_PACKAGE_PATH/$3/PKGBUILD ] \
        && echo "Could not find package configuration" \
        && return 3

    sed -i "s@#\s*\[General\]@\0\n#\ $1=$2@" $BODGE_PACKAGE_PATH/$3/PKGBUILD

    echo "Successfully set key $1 to value $3 with value $2"
}

# Set a key in a package
modify_pkg_data() {
    [ $# -eq 0 ] \
        && echo "No configuration option selected" \
        && return 1

    [ $# -eq 1 ] \
        && echo "No new value for option $1 provided" \
        && return 2

    [ $# -eq 2 ] \
        && return

    [ ! -e $BODGE_PACKAGE_PATH/$3/PKGBUILD ] \
        && echo "Could not find configuration for package $3" \
        && return 3

    change_pkg_data $1 $2 $3

    [ -z $(get_pkg_data $1 $3) ] \
        && add_pkg_data $1 $2 $3
    
    modify_pkg_data $1 $2 $(echo $@ | shift 4)
}

# Delete a key in a package
delete_pkg_data() {
    [ $# -eq 0 ] \
        && echo "No key to delete selected" \
        && return 1

    [ $# -eq 1 ] \
        && return

    sed -i "s@\(#\s*$1=\).*@\1@" $BODGE_PACKAGE_PATH/$2/PKGBUILD

    echo "Successfully cleared value of $1 for package $2"

    delete_pkg_data $1 $(echo $@ | shift 3)
}

# Generalised installation script - works by linking all files to the install location

install_package_files() {
    for folder in $(cd $2 && find -type d)
    do
        mkdir -p $1$folder
    done

    for file in $(cd $2 && find \! -type d,l)
    do
        [ ! -f $1${file:2} ] && ln -sf $2${file:2} $1${file:2}
    done

    for link in $(cd $2 && find -type l)
    do
        [ ! -f $1${link:2} ] \
            && [ ! -z $(readlink -f $2${link:2} | grep $2) ] \
            && ln -sf $2${link:2} $1${link:2}
    done
}

# Helper functions for managing the program flow

# Prompt the user for input
check_proceed() {
    read -p "Proceed? ([Y]es or [N]o)" proceed

    proceed=${proceed:0:1}

    case $proceed in
        Y|y) echo "" && run_operation $@
        ;;
        N|n) echo "" && exit 
        ;;
        *) echo "" && check_proceed $@ 
        ;;
    esac
}

# Work out the functions to run
parse_arguments() {
    [ ! -z $(echo $1 | grep -- "^\s*C.*") ] \
        && echo " * Create the packages"

    [ ! -z $(echo $1 | grep -- "^\s*M.*") ] \
        && echo " * Set $2 to $3 for each package"

    [ ! -z $(echo $1 | grep -- "^\s*D.*") ] \
        && echo " * Clear the value of $2 for each package"

    [ ! -z $(echo $1 | grep -- "^\s*G.*") ] \
        && echo " * Return the value of $2 for each package"

    [ ! -z $(echo $1 | grep -- "^\s*I.*") ] \
        && echo " * Install each package to $BODGE_ROOT"

    newarg=$(echo $1 | sed 's@[\s\-]*.@@')

    set -- "$newarg" "$(echo $@ | shift 2)"

    [ -z $1 ] \
        && return

    parse_arguments $(echo $@ | shift 1)
}

# actually run each of the operations in order
run_operation() {
    [ ! -z $(echo $1 | grep -- "\-C.*") ] \
        && for package in $(echo $@ | shift 4)
        do
            create_pkg $package
        done

    [ ! -z $(echo $1 | grep -- "\-M.*") ] \
        && modify_pkg_data $2 $3 $(echo $@ | shift 4)

    [ ! -z $(echo $1 | grep -- "\-D.*") ] \
        && delete_pkg_data $2 $(echo $@ | shift 4)

    [ ! -z $(echo $1 | grep -- "\-G.*") ] \
        && get_pkg_data $2 $(echo $@ | shift 4)

    [ ! -z $(echo $1 | grep -- "\-I.*") ] \
        && for package in $(echo $@ | shift 4)
        do
            install_package_files $BODGE_ROOT $BODGE_PACKAGE_PATH/$package/$(get_pkg_data current_version $package)/dist/
            modify_pkg_data installed_version $(get_pkg_data current_version $package) $package
        done

    newarg=$(echo $1 | sed 's@[\s\-]*.@@')

    set -- "-$newarg" "$(echo $@ | shift 2)"

    [ -z ${1:1} ] \
        && exit

    run_operation $(echo $@ | shift 1)
}

# Main program flow

# Handle the cases where we take in a configuration option
config_option="config_option"

[ ! -z $(echo $1 | grep -- "\-.*[MDG].*") ] \
    && config_option=$2 \
    && set -- "-${1}" "$(echo $@ | shift 3)"

# Handle the cases where we take in a value for the configuration option
config_value="config_value"

[ ! -z $(echo $1 | grep -- "\-.*[M].*") ] \
    && config_value=$2 \
    && set -- "-${1}" "$(echo $@ | shift 3)"

operations_to_run=$(echo $1 | sed 's@[\s\-]*@@')

echo $@

packages=$(echo $(echo $@ | shift 2) | tr " " "\n" | sort -u | tr "\n" " ")

echo "This command will affect the following packages:"
echo ""
echo $packages

echo ""
echo "The following operations will be attempted in order:"

parse_arguments $operations_to_run $config_option $config_value

echo ""

check_proceed -$operations_to_run $config_option $config_value $packages
