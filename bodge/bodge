#!/bin/sh

# TODO: Split these out so that they are called as separate utility funcs, and
# test the possibility of using csh

################################################################################
# This is a "package manager" named bodge.                                     #
#                                                                              #
# The version management is symlink-style, with different versions able to be  #
# built and kept on-disc then symlinked into the / hierarchy. Alternatively,   #
# setting prefixes correctly allows multiple versions of the same package to   #
# be present on the system - for example, a package requiring python 2 could   #
# be linked to python 2 while python 3 is the system default.                  #
#                                                                              #
# This script should run on any POSIX-compliant shell - it has been tested on  #
# bash, dash, and busybox ash                                                  #
################################################################################

################################## Variables  ##################################

# Declare global program variables
BODGE_CFLAGS=
BODGE_CXXFLAGS=

BODGE_DEFAULT_PACKAGE_PATH=/home/alex/development/lfs-helpers/bodge
BODGE_DEFAULT_ROOT=/home/alex/development/lfs-helpers/fakeroot

# Put the global program variables into the expected formats
[ ! -z "$BODGE_PACKAGE_PATH" ] \
    && BODGE_PACKAGE_PATH=$BODGE_PACKAGE_PATH \
    || BODGE_PACKAGE_PATH=$BODGE_DEFAULT_PACKAGE_PATH

[ ! -z "$BODGE_ROOT" ] \
    && BODGE_ROOT=$BODGE_ROOT \
    || BODGE_ROOT=$BODGE_DEFAULT_ROOT

BODGE_PACKAGE_PATH=$(echo $BODGE_PACKAGE_PATH | sed 's@/*$@@')
BODGE_ROOT=$(echo $BODGE_ROOT | sed 's@/*$@/@')

######### Helper functions for creating and editing the package config #########

################################################################################
# Create the package - a package is a shell script containing instructions on  #
# how the package is to be installed with the configuration options set by     #
# specific comments within the file.                                           #
#                                                                              #
# $@ - the packages to create                                                  #
################################################################################
create_pkg() {
    # If no arguments remain, assume we have created all packages successfully
    [ $# -eq 0 ] \
        && echo "All packages created successfully" \
        && return 1

    # Check the package storage directory has been created properly
    [ ! -d $BODGE_PACKAGE_PATH ] \
        && echo "Please create $BODGE_PACKAGE_PATH to proceed" \
        && return 2

    # Assign the variable name, then pop the first package off the "argument
    # stack"
    package=$1
    shift

    # Attempt to create the package
    echo "Creating package $package in $BODGE_PACKAGE_PATH/$package"

    [ ! -d $BODGE_PACKAGE_PATH/$package ] \
        && mkdir $BODGE_PACKAGE_PATH/$package

    [ -e $BODGE_PACKAGE_PATH/$package/PKGBUILD ] \
        && echo "Package $package already exists" \
        && return 3

    touch $BODGE_PACKAGE_PATH/$package/PKGBUILD

    # As far as bodge is concerned, a PKGBUILD is a shell script that executes
    # when called by the build_pkg function. Configuration options are set by
    # commenting them out and given in a .ini style format. To be safe, comments
    # in a PKGBUILD should be preceded by "##"
    cat << EOF > $BODGE_PACKAGE_PATH/$package/PKGBUILD
#!/bin/sh

# [General]
#
# [Version]
# stable_version=
# version_listing=
# version_scheme=
# latest_version=
# current_version=
# installed_version=
#
# [Build]
# distfiles=
#
# [Dependencies]
# depends_on=

EOF
    echo "Created package $package successfully"

    # Execute recursively to create every package provided to the create_pkg
    # function
    create_pkg $@
}

################################################################################
# Retrieve a key from a package                                                #
#                                                                              #
# $1 - the key (config value) whose value should be retrieved                  #
# $@ - the packages from which the key should be retrieved                     #
################################################################################
get_pkg_data() {
    # Handle possible wrong input
    [ $# -eq 0 ] \
        && echo "No configuration option selected" \
        && return 1

    [ $# -eq 1 ] \
        && return

    # Assign the input variables
    config_option=$1
    package=$2
    shift 2

    # Use sed to retrieve the value of $config_option for $package
    [ ! -e $BODGE_PACKAGE_PATH/$package/PKGBUILD ] \
        && echo "Could not find configuration for package $package" \
        && return 3

    sed -n  "s@#\ *$config_option=\ *\(.*\)\($\)@\1@p" \
            $BODGE_PACKAGE_PATH/$package/PKGBUILD

    # Execute recursively on the remaining packages, resulting in all the values
    # of $config_option for every provided package being printed
    get_pkg_data $config_option $@
}

################################################################################
# Change a key in a package                                                    #
#                                                                              #
# $1 - the configuration option to change                                      #
# $2 - the value to change the option to                                       #
# $@ - the packages to change the value for                                    #
################################################################################
change_pkg_data() {
    # Check we have the correct number of arguments
    [ $# -eq 0 ] \
        && echo "No configuration option selected" \
        && return 1

    [ $# -eq 1 ] \
        && echo "No new value for option $1 provided" \
        && return 2

    # If no packages were provided, there is nothing to do
    [ $# -eq 2 ] \
        && return

    # Assign the input variables to more semantic names
    config_option=$1
    config_value=$2
    package=$3

    # Use sed to modify the value of a config option already present in the file
    # This fails silently, so shouldn't generally be used outside of the context
    # modify_pkg_value below
    [ ! -e $BODGE_PACKAGE_PATH/$package/PKGBUILD ] \
        && echo "Could not find package configuration" \
        && return 3

    sed -i "s@\(#\ *$config_option=\).*@\1$config_value@" \
           $BODGE_PACKAGE_PATH/$package/PKGBUILD

    echo "Succesfully set $config_option to $config_value for package $package"
}

################################################################################
# Add a key to a package                                                       #
#                                                                              #
# This function will add a key to the [General] section by default, but that   #
# distinction doesn't affect the functions which retrieve and change it in the #
# future. For more precise control, you can edit the PKGBUILD directly         #
#                                                                              #
# $1 - the key (config option) you want to add                                 #
# $2 - the initial value of the added key                                      #
# $3 - the package to add the key to                                           #
################################################################################
add_pkg_data() {
    # Check we have the corect number of arguments 
    [ $# -eq 0 ] \
        && echo "No package name provided" \
        && return 1

    [ $# -eq 1 ] \
        && echo "No configuration option selected" \
        && return 2

    [ $# -eq 2 ] \
        && return

    # Assign the input variables to more semantic variable names then pop them
    config_option=$1
    config_value=$2
    package=$3

    # Add the new configuration option if the package exists
    [ ! -e $BODGE_PACKAGE_PATH/$package/PKGBUILD ] \
        && echo "Could not find package configuration for $package" \
        && return 3

    sed -i "s@#\ *\[General\]@\0\n#\ $config_option=$config_value@" \
           $BODGE_PACKAGE_PATH/$1/PKGBUILD

    echo "Set key $config_option to value $config_value for $package"
}

################################################################################
# Set a key in a package                                                       #
#                                                                              #
# If the key is present in a package's configuration, calls change_pkg_data    #
# to change that key's value to that provided.                                 #
# If the key is not present, calls add_pkg_data to add it under [General]      #
#                                                                              #
# $1 - the key (config option) you want to add                                 #
# $2 - the initial value of the added key                                      #
# $3 - the package to add the key to                                           #
################################################################################
modify_pkg_data() {
    # Check that both a configuration option and value have been provided
    [ $# -eq 0 ] \
        && echo "No configuration option selected" \
        && return 1

    [ $# -eq 1 ] \
        && echo "No new value for option $1 provided" \
        && return 2

    [ $# -eq 2 ] \
        && return

    # Pop the provided values off the argument stack
    config_option=$1
    config_value=$2
    package=$3
    shift 2

    # Attempt to change the package data
    [ ! -e $BODGE_PACKAGE_PATH/$package/PKGBUILD ] \
        && echo "Could not find configuration for package $package" \
        && return 3

    # Running change_pkg_data and add_pkg_data in this order guarantees it will
    # be successfully changed
    change_pkg_data $config_option $config_value $package

    option_exists=$(get_pkg_data $config_option $package)

    [ -z "$option_exists" ] \
        && add_pkg_data $config_option $config_value $package

    # Execute modify_pkg_data recursively to change the desired value for all
    # provided packages
    modify_pkg_data $config_option $config_value $@
}

################################################################################
# Delete a key in a package                                                    #
#                                                                              #
# $1 - the key whose value you want to clear                                   #
# $@ - the packages for which you want to clear the value                      #
################################################################################
delete_pkg_data() {
    # Handle incorrect input
    [ $# -eq 0 ] \
        && echo "No key to delete selected" \
        && return 1

    # Pop input variables off the argument stack
    config_option=$1
    package=$2
    shift 2

    [ $# -eq 0 ] \
        && return

    sed -i "s@\(#\ *$config_option=\).*@\1@" \
           $BODGE_PACKAGE_PATH/$package/PKGBUILD

    echo "Successfully cleared value of $config_option for package $package"

    # Execute recursively to clear the value for all provided packages
    delete_pkg_data $config_option $@
}

################################################################################
# Checks the most recent version of a package from a remote listing and sets   #
# the latest_version configuration option accordingly                          #
# For especially idiosyncratic versioning schemes, this will not work properly #
#                                                                              #
# $@ - the packages whose versions we want to update                           #
################################################################################
update_version() {
    # If we have no more packages, exit gracefully
    [ $? -eq 0 ] \
        && return

    # Assign our variables based on input and package metadata
    package=$1
    version_listing=$(get_pkg_data version_listing $package)
    search_pattern=$(get_pkg_data version_scheme $package)
    current_latest_version=$(get_pkg_data latest_version $package)
    shift

    # Grab the package listing and search it for the latest version
    new_version=$(curl $version_listing \
        | grep $search_pattern \
        | sed -n "s@^.*\($search_pattern\).*\$@\1@p" \
        | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n \
        | head -n 1)

    # Set the data to the new value, then continue to execute recursively
    [ $new_version -eq $current_latest_version ] \
        || modify_pkg_data latest_version $new_version $package

    update_version $@
}

################################################################################
# Installs a package from one directory to another                             #
#                                                                              #
# The second directory passed to this function will have its contents linked   #
# into the first directory passed to it - all folders will be created in the   #
# target destination if they do not exist, then any files will be              #
# symbolically linked to                                                       #
# Any files which already exist in the target directory will not be            #
# overwritten, and will in fact replace the file which would overwrite it via  #
# a symbolic link - this allows configuration files to be preserved, for       #
# example                                                                      #
#                                                                              #
# $1 - the target directory                                                    #
# $2 - the directory whose contents should be installed                        #
################################################################################
install_package_files() {
    # Check we are installing a directory that actually exists
    [ ! -d $2 ] \
        && echo "Installation folder does not exist!" \
        && return 1

    # Create all installed folders in the target directory
    for folder in $(cd $2 && find -type d)
    do
        mkdir -pv $1$(echo $folder | awk '{print substr($1,3)}')
    done

    # Symlink all files to the target directory
    for file in $(cd $2 && find \! -type d,l)
    do
        truncated_file=$(echo $file | awk '{print substr($1,3)}')

        # Link configuration files back to the install directory
        [ -e $1$truncated_file ] \
            && [ ! -h $1$truncated_file ] \
            && rm -f $2$truncated_file \
            && ln -sfv $1$truncated_file $2$truncated_file

        [ ! -e $1$truncated_file ] \
            && ln -sfv $2$truncated_file $1$truncated_file
    done

    # Handle symlinks separately - no need to create daisy-chained links
    for link in $(cd $2 && find -type l)
    do
        truncated_link=$(echo $link | awk '{print substr($1,3)}')
        [ ! -e $1$truncated_link ] \
            && [ ! -z $(readlink -f $2$truncated_link | grep $2) ] \
            && ln -sfv $2$truncated_link $1$truncated_link
    done
}

################################################################################
# Builds a package by running the instructions contained in the PKGBUILD       #
# A compliant PKGBUILD should compile and install the package to the directory #
# passed to its environment as $BODGE_PREFIX with $CFLAGS and $CXXFLAGS as set #
# at the top of this file (unless there is some compatibility reason that this #
# should not be used).                                                         #
#                                                                              #
# $BODGE_DESTDIR allows a staging directory to be set, in case the system is   #
# being installed to a directory other than BODGE_ROOT (e.g. in case the       #
# installation directory will later be chrooted into)                          #
#                                                                              #
# $@ - the packages to build                                                   #
################################################################################
build_pkg() {
    
}

################################################################################
# Installs a package by symlinking its files into the main file hierarchy      #
#                                                                              #
# $@ the list of packages you want to install                                  #
################################################################################
install_pkg() {
    layer=$1
    shift

    for package in $@
    do
        install_priority=$(get_pkg_data install_priority $package)

        [ layer -eq install_priority ] \
            && echo "Installing $package to $BODGE_ROOT" \
            && version=$(get_pkg_data current_version $package) \
            && install_package_files \
                $BODGE_ROOT \
                $BODGE_PACKAGE_PATH/$package/$version/dist/ \
            && [ $? -eq 0 ] \
                && modify_pkg_data \
                    installed_version $version \
                    $package
    done

    install_pkg $(($layer+1)) $@
}

################ Helper functions for managing the program flow ################

################################################################################
# Prompt the user for input                                                    #
################################################################################
check_proceed() {
    read -p "Proceed? ([Y]es or [N]o)" proceed

    proceed=$(echo $proceed | awk '{print substr($1,1,1)}')

    case $proceed in
        Y|y) echo "" && run_operation $@
        ;;
        N|n) echo "" && exit 
        ;;
        *) echo "" && check_proceed $@ 
        ;;
    esac
}

################################################################################
# Work out the functions to run                                                #
#                                                                              #
# Print an ordered list of the operations bodge will perform in the current    #
# configuration                                                                #
#                                                                              #
# $1 - the switches passed to bodge, which are an ordered list of the          #
#      instructions to run                                                     #
################################################################################
parse_arguments() {
    # Main statement to determine which operations we are running
    [ ! -z "$(echo $1 | grep -- "^\ *C.*")" ] \
        && echo " * Create the packages"

    [ ! -z "$(echo $1 | grep -- "^\ *M.*")" ] \
        && echo " * Set $2 to $3 for each package"

    [ ! -z "$(echo $1 | grep -- "^\ *D.*")" ] \
        && echo " * Clear the value of $2 for each package"

    [ ! -z "$(echo $1 | grep -- "^\ *G.*")" ] \
        && echo " * Return the value of $2 for each package"

    [ ! -z "$(echo $1 | grep -- "^\ *I.*")" ] \
        && echo " * Install each package to $BODGE_ROOT"
    
    [ ! -z "$(echo $1 | grep -- "^\ *V.*")" ] \
        && echo " * Check the latest version of a package"
    
    [ ! -z "$(echo $1 | grep -- "^\ *L.*")" ] \
        && echo " * Update the version of the package to install to latest"
    
    [ ! -z "$(echo $1 | grep -- "^\ *S.*")" ] \
        && echo " * Update the version of the package to install to stable"

    # Remove the argument we've just parsed from the list
    newarg=$(echo $1 | sed 's@[\ \-]*.@@')
    shift

    # Parse the next argument, exiting when we have none left
    [ -z $newarg ] \
        && return

    parse_arguments $newarg $@
}

################################################################################
# Actually run each of the operations in order                                 #
#                                                                              #
# We go through each switch passed to bodge on the command line, in order.     #
# Each one-letter switch corresponds to one of the functions bodge can perform #
# and they are each executed for each package in turn.                         #
#                                                                              #
# This is not necessarily the most efficient way to run it, but it avoids some #
# problems with asynchronous builds.                                           #
#                                                                              #
# $1 - a list of single-letter switches which correspond to the operations     #
#      we want to run                                                          #
# $2 - the configuration option (required for some subfunctions)               #
# $3 - the configuration value (required for some subfunctions)                #
# $@ - the packages on which the operations will be run                        #
################################################################################
run_operation() {
    # Take in the arguments and assign them to more semantic names
    operations_to_run=$1
    config_option=$2
    config_value=$3
    shift 3

    # Work out the first operation to run from operations_to_run
    [ ! -z "$(echo $operations_to_run | grep -- "\-C.*")" ] \
        && create_pkg $@

    [ ! -z "$(echo $operations_to_run | grep -- "\-M.*")" ] \
        && modify_pkg_data $config_option $config_value $@

    [ ! -z "$(echo $operations_to_run | grep -- "\-D.*")" ] \
        && delete_pkg_data $config_option $@

    [ ! -z "$(echo $operations_to_run | grep -- "\-G.*")" ] \
        && get_pkg_data $config_option $@

    [ ! -z "$(echo $operations_to_run | grep -- "\-I.*")" ] \
        && install_pkg 0 $@
    
    [ ! -z "$(echo $operations_to_run | grep -- "\-V.*")" ] \
        && update_version $@

    [ ! -z "$(echo $operations_to_run | grep -- "\-L.*")" ] \
        && for package in $@
           do
               modify_pkg_data \
                  current_version \
                  $(get_pkg_data latest_version $package) \
                  $package
           done

    [ ! -z "$(echo $operations_to_run | grep -- "\-S.*")" ] \
        && for package in $@
           do
               modify_pkg_data \
                  current_version \
                  $(get_pkg_data stable_version $package) \
                  $package
           done

    # Todo: need function for actually executing the build script

    # Remove the operation we have just run from the list and contine to 
    # execute recursively, exiting when we are done
    newarg=$(echo $operations_to_run | sed 's@[\ \-]*.@@')

    [ -z "$(echo $newarg | awk '{print substr($1,1,1)}')" ] \
        && exit

    run_operation -$newarg $config_option $config_value $@
}

############################## Main program flow  ##############################

# Take in the operations we'll be running and pop that information off the 
# argument "stack"
operations_to_run=$(echo $1 | sed 's@[\ \-]*@@')
shift

# Handle the cases where we take in a configuration option
config_option="config_option"

[ ! -z "$(echo $operations_to_run | grep -- ".*[MDG].*")" ] \
    && config_option=$1 \
    && shift

# Handle the cases where we take in a value for the configuration option
config_value="config_value"

[ ! -z "$(echo $operations_to_run | grep -- ".*[M].*")" ] \
    && config_value=$1 \
    && shift

# Process the packages
packages=$(echo $@ | tr " " "\n" | sort -u | tr "\n" " ")

echo "This command will affect the following packages:"
echo ""
echo $packages

echo ""
echo "The following operations will be attempted in order:"

parse_arguments $operations_to_run $config_option $config_value

echo ""

check_proceed -$operations_to_run $config_option $config_value $packages
